// Generated by gencpp from file HDMap/LocalMapRequest.msg
// DO NOT EDIT!


#ifndef HDMAP_MESSAGE_LOCALMAPREQUEST_H
#define HDMAP_MESSAGE_LOCALMAPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace HDMap
{
template <class ContainerAllocator>
struct LocalMapRequest_
{
  typedef LocalMapRequest_<ContainerAllocator> Type;

  LocalMapRequest_()
    : x(0.0)
    , y(0.0)
    , has_local_map(false)  {
    }
  LocalMapRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , has_local_map(false)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef uint8_t _has_local_map_type;
  _has_local_map_type has_local_map;





  typedef boost::shared_ptr< ::HDMap::LocalMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::HDMap::LocalMapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LocalMapRequest_

typedef ::HDMap::LocalMapRequest_<std::allocator<void> > LocalMapRequest;

typedef boost::shared_ptr< ::HDMap::LocalMapRequest > LocalMapRequestPtr;
typedef boost::shared_ptr< ::HDMap::LocalMapRequest const> LocalMapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::HDMap::LocalMapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::HDMap::LocalMapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace HDMap

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/lunar/share/geometry_msgs/cmake/../msg'], 'HDMap': ['/media/vincent/DATA/Ubuntu/Project/catkin_ws/src/HDMap/msg'], 'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::HDMap::LocalMapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::HDMap::LocalMapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::HDMap::LocalMapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::HDMap::LocalMapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::HDMap::LocalMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::HDMap::LocalMapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::HDMap::LocalMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c63853715d9971380928b9f7f319a2c";
  }

  static const char* value(const ::HDMap::LocalMapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c63853715d99713ULL;
  static const uint64_t static_value2 = 0x80928b9f7f319a2cULL;
};

template<class ContainerAllocator>
struct DataType< ::HDMap::LocalMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "HDMap/LocalMapRequest";
  }

  static const char* value(const ::HDMap::LocalMapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::HDMap::LocalMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n\
float64 y\n\
bool has_local_map\n\
";
  }

  static const char* value(const ::HDMap::LocalMapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::HDMap::LocalMapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.has_local_map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalMapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::HDMap::LocalMapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::HDMap::LocalMapRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "has_local_map: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_local_map);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HDMAP_MESSAGE_LOCALMAPREQUEST_H
