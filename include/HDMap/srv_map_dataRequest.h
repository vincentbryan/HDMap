// Generated by gencpp from file HDMap/srv_map_dataRequest.msg
// DO NOT EDIT!


#ifndef HDMAP_MESSAGE_SRV_MAP_DATAREQUEST_H
#define HDMAP_MESSAGE_SRV_MAP_DATAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace HDMap
{
template <class ContainerAllocator>
struct srv_map_dataRequest_
{
  typedef srv_map_dataRequest_<ContainerAllocator> Type;

  srv_map_dataRequest_()
    : type()
    , argv()  {
    }
  srv_map_dataRequest_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , argv(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _argv_type;
  _argv_type argv;





  typedef boost::shared_ptr< ::HDMap::srv_map_dataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::HDMap::srv_map_dataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct srv_map_dataRequest_

typedef ::HDMap::srv_map_dataRequest_<std::allocator<void> > srv_map_dataRequest;

typedef boost::shared_ptr< ::HDMap::srv_map_dataRequest > srv_map_dataRequestPtr;
typedef boost::shared_ptr< ::HDMap::srv_map_dataRequest const> srv_map_dataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::HDMap::srv_map_dataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::HDMap::srv_map_dataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace HDMap

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'HDMap': ['/home/iceytan/CLionProjects/HDMap/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::HDMap::srv_map_dataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::HDMap::srv_map_dataRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::HDMap::srv_map_dataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::HDMap::srv_map_dataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::HDMap::srv_map_dataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::HDMap::srv_map_dataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::HDMap::srv_map_dataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3565d2c0e102dbb0f9ab01675d66ca98";
  }

  static const char* value(const ::HDMap::srv_map_dataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3565d2c0e102dbb0ULL;
  static const uint64_t static_value2 = 0xf9ab01675d66ca98ULL;
};

template<class ContainerAllocator>
struct DataType< ::HDMap::srv_map_dataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "HDMap/srv_map_dataRequest";
  }

  static const char* value(const ::HDMap::srv_map_dataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::HDMap::srv_map_dataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type\n\
float64[] argv\n\
";
  }

  static const char* value(const ::HDMap::srv_map_dataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::HDMap::srv_map_dataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.argv);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv_map_dataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::HDMap::srv_map_dataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::HDMap::srv_map_dataRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "argv[]" << std::endl;
    for (size_t i = 0; i < v.argv.size(); ++i)
    {
      s << indent << "  argv[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.argv[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HDMAP_MESSAGE_SRV_MAP_DATAREQUEST_H
