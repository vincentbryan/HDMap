// Generated by gencpp from file HDMap/LocalMapResponse.msg
// DO NOT EDIT!


#ifndef HDMAP_MESSAGE_LOCALMAPRESPONSE_H
#define HDMAP_MESSAGE_LOCALMAPRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

//#include <HDMap/RoadMSG.h>
//#include <HDMap/JunctionMSG.h>
//#include <HDMap/RoadMSG.h>
#include "RoadMSG.h"
#include "JunctionMSG.h"
#include "RoadMSG.h"

namespace HDMap
{
template <class ContainerAllocator>
struct LocalMapResponse_
{
  typedef LocalMapResponse_<ContainerAllocator> Type;

  LocalMapResponse_()
    : curr_road()
    , junction()
    , next_road()  {
    }
  LocalMapResponse_(const ContainerAllocator& _alloc)
    : curr_road(_alloc)
    , junction(_alloc)
    , next_road(_alloc)  {
  (void)_alloc;
    }



   typedef  ::HDMap::RoadMSG_<ContainerAllocator>  _curr_road_type;
  _curr_road_type curr_road;

   typedef  ::HDMap::JunctionMSG_<ContainerAllocator>  _junction_type;
  _junction_type junction;

   typedef  ::HDMap::RoadMSG_<ContainerAllocator>  _next_road_type;
  _next_road_type next_road;





  typedef boost::shared_ptr< ::HDMap::LocalMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::HDMap::LocalMapResponse_<ContainerAllocator> const> ConstPtr;

}; // struct LocalMapResponse_

typedef ::HDMap::LocalMapResponse_<std::allocator<void> > LocalMapResponse;

typedef boost::shared_ptr< ::HDMap::LocalMapResponse > LocalMapResponsePtr;
typedef boost::shared_ptr< ::HDMap::LocalMapResponse const> LocalMapResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::HDMap::LocalMapResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::HDMap::LocalMapResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace HDMap

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/lunar/share/geometry_msgs/cmake/../msg'], 'HDMap': ['/media/vincent/DATA/Ubuntu/Project/catkin_ws/src/HDMap/msg'], 'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::HDMap::LocalMapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::HDMap::LocalMapResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::HDMap::LocalMapResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::HDMap::LocalMapResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::HDMap::LocalMapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::HDMap::LocalMapResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::HDMap::LocalMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d470c991daacc08efea5b83d7b0a09ff";
  }

  static const char* value(const ::HDMap::LocalMapResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd470c991daacc08eULL;
  static const uint64_t static_value2 = 0xfea5b83d7b0a09ffULL;
};

template<class ContainerAllocator>
struct DataType< ::HDMap::LocalMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "HDMap/LocalMapResponse";
  }

  static const char* value(const ::HDMap::LocalMapResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::HDMap::LocalMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "HDMap/RoadMSG curr_road\n\
HDMap/JunctionMSG junction\n\
HDMap/RoadMSG next_road\n\
\n\
================================================================================\n\
MSG: HDMap/RoadMSG\n\
Header header\n\
HDMap/Pose2DArray[] lanes\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: HDMap/Pose2DArray\n\
Header header\n\
geometry_msgs/Pose2D[] lane\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
================================================================================\n\
MSG: HDMap/JunctionMSG\n\
Header header\n\
int64[] in\n\
int64[] out\n\
HDMap/Pose2DArray[] conns\n\
";
  }

  static const char* value(const ::HDMap::LocalMapResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::HDMap::LocalMapResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.curr_road);
      stream.next(m.junction);
      stream.next(m.next_road);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalMapResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::HDMap::LocalMapResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::HDMap::LocalMapResponse_<ContainerAllocator>& v)
  {
    s << indent << "curr_road: ";
    s << std::endl;
    Printer< ::HDMap::RoadMSG_<ContainerAllocator> >::stream(s, indent + "  ", v.curr_road);
    s << indent << "junction: ";
    s << std::endl;
    Printer< ::HDMap::JunctionMSG_<ContainerAllocator> >::stream(s, indent + "  ", v.junction);
    s << indent << "next_road: ";
    s << std::endl;
    Printer< ::HDMap::RoadMSG_<ContainerAllocator> >::stream(s, indent + "  ", v.next_road);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HDMAP_MESSAGE_LOCALMAPRESPONSE_H
